---
# Role to deploy an Okapi server from source to a Debian Jessie box
- name: Copy Okapi initializaiton service file
  become: yes
  template: src=okapi_init.service.j2 dest=/etc/systemd/system/okapi_init.service owner={{ folio_user }} group={{ folio_group }} mode=0600
  register: okapi_init_copy

- name: Copy Okapi service file
  become: yes
  template: src=okapi.service.j2 dest=/etc/systemd/system/okapi.service owner={{ folio_user }} group={{ folio_group }} mode=0600
  register: okapi_service_copy
  notify:
    - Restart Okapi

- name: systemctl daemon-reload
  become: yes
  command: systemctl daemon-reload
  when: okapi_init_copy.changed or okapi_service_copy.changed

- name: Create Okapi src directory
  become: yes
  file: path={{ okapi_src_home }} state=directory owner={{ folio_user }} group={{ folio_group }}

- name: Clone Okapi repository
  become: yes
  become_user: "{{ folio_user }}"
  git: repo=https://github.com/folio-org/okapi.git dest={{ okapi_src_home }}
  register: okapi_clone

- name: Force Maven build if repository updated
  become: yes
  become_user: "{{ folio_user }}"
  file: path={{ okapi_src_home }}/install.log state=absent
  when: okapi_clone.changed

- name: See if Okapi will need to be built
  stat: path={{ okapi_src_home }}/install.log
  register: okapi_build_stat

- name: Stop Okapi service if repository updated or if build required
  become: yes
  service: name=okapi state=stopped
  when: okapi_clone.changed or okapi_build_stat.stat.isreg is not defined

- name: Build Okapi
  become: yes
  become_user: "{{ folio_user }}"
  shell: /usr/bin/mvn -q clean install > install.log
  args:
    chdir: "{{ okapi_src_home }}"
    creates: "{{ okapi_src_home }}/install.log"
  notify: Restart Okapi

- name: Set up Okapi home directory
  become: yes
  file: state=directory path={{ item }} owner={{ folio_user }} group={{ folio_group }}
  with_items:
    - "{{ okapi_home }}/lib"
    - "{{ okapi_home }}/conf"

- name: Link in Okapi jar
  become: yes
  become_user: "{{ folio_user }}"
  file: state=link src={{ okapi_src_home }}/okapi-core/target/okapi-core-fat.jar path={{ okapi_home }}/lib/okapi-core-fat.jar
  notify: Restart Okapi

- name: Create Okapi postgresql user
  become: yes
  become_user: postgres
  postgresql_user:
    name: "{{ okapi_pg_user }}"
    password: "{{ okapi_pg_password }}"
    role_attr_flags: CREATEDB

- name: Create Okapi db
  become: yes
  become_user: postgres
  postgresql_db: name=okapi owner={{ okapi_pg_user }}
  register: pg_db_create

- name: Init Okapi db
  become: yes
  service: name=okapi_init state=started
  when: pg_db_create.changed

- name: Stop Okapi init instance
  become: yes
  service: name=okapi_init state=stopped
  when: pg_db_create.changed

- name: Enable and start Okapi service
  become: yes
  service: name=okapi enabled=yes state=started

- name: Check okapi service status
  become: yes
  command: systemctl status okapi
  ignore_errors: yes
  changed_when: no
  register: okapi_status

- name: Notify handler if okapi is down
  debug: msg="Setting Okapi to restart"
  when: okapi_status | failed
  changed_when: yes
  notify: Restart Okapi
